///////////////////////////////////////////////////////////////////////////////
//
// JointAttribute.cpp
// 
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "JointAttribute.h"

///////////////////////////////////////////////////////////////////////////////
//
// Including
//
///////////////////////////////////////////////////////////////////////////////

#include <memory.h>

///////////////////////////////////////////////////////////////////////////////
//
// Global
//
///////////////////////////////////////////////////////////////////////////////

const _INTEGER CJointAttribute::nullJoint					= 0;
const _INTEGER CJointAttribute::custom6DOFJoint				= 7;
const _INTEGER CJointAttribute::customBallJoint				= 8;
const _INTEGER CJointAttribute::customHingeJoint			= 9;
const _INTEGER CJointAttribute::customSliderJoint			= 10;
const _INTEGER CJointAttribute::classicBallJoint			= 1;
const _INTEGER CJointAttribute::classicHingeJoint			= 2;
const _INTEGER CJointAttribute::classicSliderJoint			= 3;
const _INTEGER CJointAttribute::classicCorkscrewJoint		= 4;
const _INTEGER CJointAttribute::classicUniversalJoint		= 5;
const _INTEGER CJointAttribute::classicUpVectorJoint		= 6;

///////////////////////////////////////////////////////////////////////////////
//
// CJointAttribute
//
// Default construction.
//
/////////////////////////////////////////////////////////////////////////////////

CJointAttribute::CJointAttribute(void)
{
	//Set default value.
	type = nullJoint;
	//Set stiffness.
	stiffness = 1.0f;
	//Set self collision.
	selfCollision = _TRUE;
	//Clear data.
	memset(&jointData,0,sizeof(tagJointData));
}

///////////////////////////////////////////////////////////////////////////////
//
// CJointAttribute
//
// Default construction.
//
/////////////////////////////////////////////////////////////////////////////////

CJointAttribute::CJointAttribute(const CJointAttribute& attribute)
{
	//Copy joint.
	copyJoint(attribute);
}

///////////////////////////////////////////////////////////////////////////////
//
// CJointAttribute
//
// Default deconstruction.
//
/////////////////////////////////////////////////////////////////////////////////

CJointAttribute::~CJointAttribute(void)
{

}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

CJointAttribute& CJointAttribute::operator = (const CJointAttribute& attribute)
{
	//Copy joint.
	copyJoint(attribute);
	//Return this.
	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
// CopyJoint
//
///////////////////////////////////////////////////////////////////////////////

void CJointAttribute::copyJoint(const CJointAttribute& attribute)
{
	//Set value.
	type = attribute.type;
	//Set stiffness.
	stiffness = attribute.stiffness;
	//Set self collision.
	selfCollision = attribute.selfCollision;
	//Copy data.
	memcpy(&jointData,&attribute.jointData,sizeof(tagJointData));
}

///////////////////////////////////////////////////////////////////////////////
//
// GetType
//
///////////////////////////////////////////////////////////////////////////////

_INTEGER CJointAttribute::getType() const
{
	//Return result.
	return type;
}

///////////////////////////////////////////////////////////////////////////////
//
// SetType
//
///////////////////////////////////////////////////////////////////////////////

void CJointAttribute::setType(_INTEGER type)
{
#ifdef _DEBUG
	assert(type >= 0 && type <= 10);
#endif
	//Set value.
	this->type = type;
}

///////////////////////////////////////////////////////////////////////////////
//
// IsCustomJoint
//
///////////////////////////////////////////////////////////////////////////////

_BOOL CJointAttribute::isCustomJoint(_INTEGER type)
{
	//Check result.
	if(type == custom6DOFJoint) return _TRUE;
	else if(type == customBallJoint) return _TRUE;
	else if(type == customHingeJoint) return _TRUE;
	else if(type == customSliderJoint) return _TRUE;
	//Return false.
	return _FALSE;
}

///////////////////////////////////////////////////////////////////////////////
//
// IsClassicJoint
//
///////////////////////////////////////////////////////////////////////////////

_BOOL CJointAttribute::isClassicJoint(_INTEGER type)
{
	//Check result.
	if(type == classicBallJoint) return _TRUE;
	else if(type == classicHingeJoint) return _TRUE;
	else if(type == classicSliderJoint) return _TRUE;
	else if(type == classicCorkscrewJoint) return _TRUE;
	else if(type == classicUniversalJoint) return _TRUE;
	else if(type == classicUpVectorJoint) return _TRUE;
	//Return false.
	return _FALSE;
}
