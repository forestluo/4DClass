///////////////////////////////////////////////////////////////////////////////
//
// 4DLock.cpp
//  
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "4DLock.h"

////////////////////////////////////////////////////////////////////////////////
//
// Special including files.
//
// Including the files for the specifal operation system.
//
// These including files are used for the specifal operation system.
// They are mainly concert about the management of thread, synchronization, socket etc.
//
////////////////////////////////////////////////////////////////////////////////

#include <windows.h>
#include <process.h>

////////////////////////////////////////////////////////////////////////////////
//
// Internal definitions.
//
// These definitions are generally used internally.
//
////////////////////////////////////////////////////////////////////////////////

#define INSTANCE(p)											((LPCRITICAL_SECTION)(p))

///////////////////////////////////////////////////////////////////////////////
//
// C4DLock
//
///////////////////////////////////////////////////////////////////////////////

C4DLock::C4DLock(void)
{
	//Create lock.
	lock = (_OBJECT)malloc(sizeof(CRITICAL_SECTION));
#ifdef _DEBUG
	assert(lock != _NULL);
#endif
	//Initialize cirtical section.
	::InitializeCriticalSection(INSTANCE(lock));
}

///////////////////////////////////////////////////////////////////////////////
//
// ~C4DLock
//
///////////////////////////////////////////////////////////////////////////////

C4DLock::~C4DLock(void)
{
#ifdef _DEBUG
	assert(lock != _NULL);
#endif
	//Delete critical section.
	::DeleteCriticalSection(INSTANCE(lock));

	//Free lock.
	free(INSTANCE(lock));
	//Clear lock.
	lock = (LPCRITICAL_SECTION *)_NULL;
}

///////////////////////////////////////////////////////////////////////////////
//
// OpenLock
//
///////////////////////////////////////////////////////////////////////////////

void C4DLock::openLock()
{
#ifdef _DEBUG
	assert(lock != _NULL);
#endif
	//Enter critical section.
	::EnterCriticalSection(INSTANCE(lock));
}

///////////////////////////////////////////////////////////////////////////////
//
// CloseLock
//
///////////////////////////////////////////////////////////////////////////////
	
void C4DLock::closeLock()
{
#ifdef _DEBUG
	assert(lock != _NULL);
#endif
	//Leave critical section.
	::LeaveCriticalSection(INSTANCE(lock));
}
