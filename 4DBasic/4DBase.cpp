///////////////////////////////////////////////////////////////////////////////
//
// 4DBase.cpp
//  
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "4DBase.h"
#include "4DString.h"
#include "4DBaseMap.h"

///////////////////////////////////////////////////////////////////////////////
//
// Including
//
///////////////////////////////////////////////////////////////////////////////

#include <string>
using namespace std;

///////////////////////////////////////////////////////////////////////////////
//
// Global
//
///////////////////////////////////////////////////////////////////////////////

#pragma init_seg(".CRT$XCC")
//Base map.
static C4DBaseMap baseMap;

///////////////////////////////////////////////////////////////////////////////
//
// C4DBase
//
///////////////////////////////////////////////////////////////////////////////

C4DBase::C4DBase(_STRING thisName,_STRING superName)
{
#ifdef _DEBUG
	assert(thisName != NULL && wcslen(thisName) > 0);
	assert(superName != NULL && wcslen(superName) > 0);
#endif

	//Set name.
	this->thisName = thisName;
	//Set name.
	this->superName = superName;

	//Get hash code.
	thisClass = C4DString::hashCode(thisName);
	//Get hash code.
	superClass = C4DString::hashCode(superName);

	//Add it into map.
	baseMap.addBase(this);
}

///////////////////////////////////////////////////////////////////////////////
//
// ~C4DBase
//
///////////////////////////////////////////////////////////////////////////////

C4DBase::~C4DBase()
{

}

///////////////////////////////////////////////////////////////////////////////
//
// ClassCode
//
///////////////////////////////////////////////////////////////////////////////

_LONG C4DBase::classCode() const
{
	//Return result.
	return thisClass;
}

///////////////////////////////////////////////////////////////////////////////
//
// SuperCode
//
///////////////////////////////////////////////////////////////////////////////
	
_LONG C4DBase::superCode() const
{
	//Return result.
	return superClass;
}

///////////////////////////////////////////////////////////////////////////////
//
// IsBaseOf
//
///////////////////////////////////////////////////////////////////////////////

_BOOL C4DBase::isBaseOf(_LONG thisClass,_LONG superClass)
{
	//Return result.
	return baseMap.isBaseOf(thisClass,superClass);
}
