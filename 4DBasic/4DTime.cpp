///////////////////////////////////////////////////////////////////////////////
//
// 4DTime.h
//  
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "4DTime.h"

////////////////////////////////////////////////////////////////////////////////
//
// Special including files
//
// Including the files for the specifal operation system.
//
// These including files are used for the specifal operation system.
// They are mainly concert about the management of thread, synchronization, socket etc.
//
////////////////////////////////////////////////////////////////////////////////

#include <time.h>
#include <windows.h>

///////////////////////////////////////////////////////////////////////////////
//
// C4DTime
//
///////////////////////////////////////////////////////////////////////////////

C4DTime::C4DTime(void)
{
	//Initialize time.
	initializeTime();
}

///////////////////////////////////////////////////////////////////////////////
//
// C4DTime
//
///////////////////////////////////////////////////////////////////////////////

C4DTime::C4DTime(_LONG milliseconds)
{
	//Set timestamp.
	setTimestamp(milliseconds);
}

///////////////////////////////////////////////////////////////////////////////
//
// ~C4DTime
//
///////////////////////////////////////////////////////////////////////////////

C4DTime::~C4DTime(void)
{

}

////////////////////////////////////////////////////////////////////////////////
//
// InitializeTime
//
////////////////////////////////////////////////////////////////////////////////

void C4DTime::initializeTime()
{
	//Open.
	openLock();
	{
		//Get milliseconds.
		milliseconds = getMilliseconds();
	}
	//Close.
	closeLock();
}

////////////////////////////////////////////////////////////////////////////////
//
// GetTimestamp
//
////////////////////////////////////////////////////////////////////////////////

_LONG C4DTime::getTimestamp()
{
	//Value.
	_LONG milliseconds;
	//Open.
	openLock();
	{
		//Get value.
		milliseconds = this->milliseconds;
	}
	//Close.
	closeLock();
	//Return result.
	return milliseconds;
}

////////////////////////////////////////////////////////////////////////////////
//
// SetTimestamp
//
////////////////////////////////////////////////////////////////////////////////

void C4DTime::setTimestamp(_LONG milliseconds)
{
	//Open.
	openLock();
	{
		//Get milliseconds.
		this->milliseconds = milliseconds;
	}
	//Close.
	closeLock();
}

///////////////////////////////////////////////////////////////////////////////
//
// GetMilliseconds
//
///////////////////////////////////////////////////////////////////////////////

_LONG C4DTime::getMilliseconds()
{
	//Get tick count.
	return (_LONG)GetTickCount();
}

///////////////////////////////////////////////////////////////////////////////
//
// GetPerformanceCounters
//
///////////////////////////////////////////////////////////////////////////////

_LONG C4DTime::getPerformanceCounters()
{
	//Large integer.
	LARGE_INTEGER largeCurrent;
	//Get current counter.
	return QueryPerformanceCounter(&largeCurrent) ? 
		((((_LONG)largeCurrent.HighPart) << 32) | (_LONG)largeCurrent.LowPart) : (_LONG)-1;
}
