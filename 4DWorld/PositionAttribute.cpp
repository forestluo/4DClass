///////////////////////////////////////////////////////////////////////////////
//
// PositionAttribute.cpp
//  
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "PositionAttribute.h"

///////////////////////////////////////////////////////////////////////////////
//
// CPositionAttribute
//
// Default construction.
//
/////////////////////////////////////////////////////////////////////////////////

CPositionAttribute::CPositionAttribute(void)
{
	//Rotation vector.
	rotation.identity();
	//Scale vector.
	scale = C4DVector3(1.0f,1.0f,1.0f);
	//Position vector.
	position = C4DVector3(0.0f,0.0f,0.0f);
}

///////////////////////////////////////////////////////////////////////////////
//
// CPositionAttribute
//
// Default construction.
//
/////////////////////////////////////////////////////////////////////////////////

CPositionAttribute::CPositionAttribute(const CPositionAttribute& attribute)
{
	//Copy position.
	copyPosition(attribute);
}

///////////////////////////////////////////////////////////////////////////////
//
// CPositionAttribute
//
// Default deconstruction.
//
/////////////////////////////////////////////////////////////////////////////////

CPositionAttribute::~CPositionAttribute(void)
{

}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

CPositionAttribute& CPositionAttribute::operator = (const CPositionAttribute& attribute)
{
	//Copy position.
	copyPosition(attribute);
	//Return this.
	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
// CopyPosition
//
///////////////////////////////////////////////////////////////////////////////

void CPositionAttribute::copyPosition(const CPositionAttribute& attribute)
{
	//Scale vector.
	scale = attribute.scale;
	//Position vector.
	position = attribute.position;
	//Rotation vector.
	rotation = attribute.rotation;
}

///////////////////////////////////////////////////////////////////////////////
//
// GetScale
//
///////////////////////////////////////////////////////////////////////////////

const C4DVector3& CPositionAttribute::getScale() const
{
	//Return result.
	return scale;
}

///////////////////////////////////////////////////////////////////////////////
//
// SetScale
//
///////////////////////////////////////////////////////////////////////////////

void CPositionAttribute::setScale(const C4DVector3& scale)
{
	//Set value.
	this->scale = scale;
}

///////////////////////////////////////////////////////////////////////////////
//
// SetScale
//
///////////////////////////////////////////////////////////////////////////////

void CPositionAttribute::setScale(_FLOAT sx,_FLOAT sy,_FLOAT sz)
{
	//Set value.
	scale.x() = sx, scale.y() = sy, scale.z() = sz;
}

///////////////////////////////////////////////////////////////////////////////
//
// GetPosition
//
///////////////////////////////////////////////////////////////////////////////

const C4DVector3& CPositionAttribute::getPosition() const
{
	//Return result.
	return position;
}

///////////////////////////////////////////////////////////////////////////////
//
// SetPosition
//
///////////////////////////////////////////////////////////////////////////////

void CPositionAttribute::setPosition(const C4DVector3& position)
{
	//Set value.
	this->position = position;
}

///////////////////////////////////////////////////////////////////////////////
//
// SetPosition
//
///////////////////////////////////////////////////////////////////////////////

void CPositionAttribute::setPosition(_FLOAT tx,_FLOAT ty,_FLOAT tz)
{
	//Set value.
	position.x() = tx, position.y() = ty, position.z() = tz;
}

///////////////////////////////////////////////////////////////////////////////
//
// GetRotation
//
///////////////////////////////////////////////////////////////////////////////

const C4DQuaternion& CPositionAttribute::getRotation() const
{
	//Return result.
	return rotation;
}

///////////////////////////////////////////////////////////////////////////////
//
// SetRotate
//
///////////////////////////////////////////////////////////////////////////////

void CPositionAttribute::setRotation(const C4DQuaternion& rotation)
{
	//Set rotation.
	this->rotation = rotation;
}

///////////////////////////////////////////////////////////////////////////////
//
// GetRotation
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 CPositionAttribute::getEularRotation() const
{
	//Return result.
	return rotation.eular();
}

///////////////////////////////////////////////////////////////////////////////
//
// SetEularRotation
//
///////////////////////////////////////////////////////////////////////////////

void CPositionAttribute::setEularRotation(_FLOAT rx,_FLOAT ry,_FLOAT rz)
{
	//Set value.
	rotation.eular(C4DVector3(rx,ry,rz));
}
