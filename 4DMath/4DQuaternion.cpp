///////////////////////////////////////////////////////////////////////////////
//
// 4DQuaternion.cpp
//  
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////
#include "4DQuaternion.h"

///////////////////////////////////////////////////////////////////////////////
//
// Including
//
///////////////////////////////////////////////////////////////////////////////

#include "D3DX10Math.h"

///////////////////////////////////////////////////////////////////////////////
//
// Definition
//
///////////////////////////////////////////////////////////////////////////////

#define CLAMP(x , min , max) ((x) > (max) ? (max) : ((x) < (min) ? (min) : x))

///////////////////////////////////////////////////////////////////////////////
//
// C4DQuaternion
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion::C4DQuaternion(void)
{
	//Zero memory.
	ZeroMemory(values,sizeof(_FLOAT4));
}

///////////////////////////////////////////////////////////////////////////////
//
// C4DQuaternion
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion::C4DQuaternion(const _FLOAT* floats)
{
	//Copy memory.
	memcpy(values,floats,sizeof(_FLOAT4));
}

///////////////////////////////////////////////////////////////////////////////
//
// C4DQuaternion
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion::C4DQuaternion(const C4DQuaternion& quaternion)
{
	//Copy memory.
	memcpy(values,quaternion.values,sizeof(_FLOAT4));
}

///////////////////////////////////////////////////////////////////////////////
//
// C4DQuaternion
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion::C4DQuaternion(_FLOAT x,_FLOAT y,_FLOAT z,_FLOAT w)
{
	//Set values.
	values[0] = x, values[1] = y, values[2] = z, values[3] = w;
}

///////////////////////////////////////////////////////////////////////////////
//
// C4DQuaternion
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion::~C4DQuaternion(void)
{

}

///////////////////////////////////////////////////////////////////////////////
//
// C4DQuaternion
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion::C4DQuaternion(const C4DVector3& omega)
{
	//Set eular.
	eular(omega);
}

///////////////////////////////////////////////////////////////////////////////
//
// C4DQuaternion
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion::C4DQuaternion(const C4DVector3& axis,_FLOAT angle)
{
	//Axis rotation.
	axisRotation(axis,angle);
}

///////////////////////////////////////////////////////////////////////////////
//
// C4DQuaternion
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion::C4DQuaternion(const C4DVector3& v1,const C4DVector3& v2)
{
	//Get length.
	_FLOAT length1 = v1.length();
#ifdef _DEBUG
	assert(length1 > 0.0f);
#endif

	//Get length.
	_FLOAT length2 = v2.length();
#ifdef _DEBUG
	assert(length2 > 0.0f);
#endif

	//Identity.
	identity();
	//Out.
	C4DVector3 result = v1.cross(v2);
	//Get length.
	_FLOAT outLength = result.length();
	//Check result.
	if(outLength <= 0.0f) return;
	//Alfa
	_FLOAT alfa = acosf(v1.dot(v2) / (length1 * length2));
	//Normalize.
	result.normalize();
	//Rotation.
	axisRotation(result,alfa);
}

///////////////////////////////////////////////////////////////////////////////
//
// X
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT& C4DQuaternion::x()
{
	//Return result.
	return values[0];
}

///////////////////////////////////////////////////////////////////////////////
//
// X
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT C4DQuaternion::x() const
{
	//Return result.
	return values[0];
}

///////////////////////////////////////////////////////////////////////////////
//
// Y
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT& C4DQuaternion::y()
{
	//Return result.
	return values[1];
}

///////////////////////////////////////////////////////////////////////////////
//
// Y
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT C4DQuaternion::y() const
{
	//Return result.
	return values[1];
}

///////////////////////////////////////////////////////////////////////////////
//
// Z
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT& C4DQuaternion::z()
{
	//Return result.
	return values[2];
}

///////////////////////////////////////////////////////////////////////////////
//
// Z
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT C4DQuaternion::z() const
{
	//Return result.
	return values[2];
}

///////////////////////////////////////////////////////////////////////////////
//
// W
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT& C4DQuaternion::w()
{
	//Return result.
	return values[3];
}

///////////////////////////////////////////////////////////////////////////////
//
// W
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT C4DQuaternion::w() const
{
	//Return result.
	return values[3];
}

///////////////////////////////////////////////////////////////////////////////
//
// Length
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT C4DQuaternion::length() const
{
	//Return result.
	return D3DXQuaternionLength(&D3DXQUATERNION(values));
}

///////////////////////////////////////////////////////////////////////////////
//
// Identity
//
///////////////////////////////////////////////////////////////////////////////

void C4DQuaternion::identity()
{
	//Quaternion out.
	D3DXQUATERNION qOut;
	//Identity.
	D3DXQuaternionIdentity(&qOut);
	//Copy values.
	memcpy(values,(_FLOAT *)qOut,sizeof(_FLOAT4));
}

///////////////////////////////////////////////////////////////////////////////
//
// Inverse
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::inverse() const
{
	//Vector out.
	D3DXQUATERNION qOut;
	//Quaternion in.
	D3DXQUATERNION qIn(values);
	//Inverse it.
	D3DXQuaternionInverse(&qOut,&qIn);
	//Set value.
	return C4DQuaternion((_FLOAT *)qOut);
}

///////////////////////////////////////////////////////////////////////////////
//
// Reverse
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::reverse() const
{
	//Return value.
	return C4DQuaternion(-x(),-y(),-z(),w());
}

///////////////////////////////////////////////////////////////////////////////
//
// Normalize
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::normalize() const
{
	//Quaternion out.
	D3DXQUATERNION qOut;
	//Quaternion in.
	D3DXQUATERNION qIn(values);
	//Normalize it.
	D3DXQuaternionNormalize(&qOut,&qIn);
	//Return result.
	return C4DQuaternion((_FLOAT *)qOut);
}

///////////////////////////////////////////////////////////////////////////////
//
// Conjugate
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::conjugate() const
{
	//Vector out.
	D3DXQUATERNION qOut;
	//Quaternion in.
	D3DXQUATERNION qIn(values);
	//Normalize it.
	D3DXQuaternionConjugate(&qOut,&qIn);
	//Return result.
	return C4DQuaternion((_FLOAT *)qOut);
}

///////////////////////////////////////////////////////////////////////////////
//
// Eular
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 C4DQuaternion::eular() const
{
	//Vector.
	C4DVector3 omega;
	//Set value.
	omega.z() = atan2(2 * (w() * z() + x() * y()) , 1 - 2 * (z() * z() + x() * x()));
	omega.x() = asin(CLAMP(2 * (w() * x() - y() * z()) , -1.0f , 1.0f));
	omega.y() = atan2(2 * (w() * y() + z() * x()) , 1 - 2 * (x() * x() + y() * y()));
	//Return result.
	return omega;
}

///////////////////////////////////////////////////////////////////////////////
//
// Eular
//
///////////////////////////////////////////////////////////////////////////////

void C4DQuaternion::eular(const C4DVector3& omega)
{
	//Roll(z)
	_FLOAT fCosHRoll = cos(omega.z() * 0.5f);
	_FLOAT fSinHRoll = sin(omega.z() * 0.5f);
	//Pitch(x)
	_FLOAT fCosHPitch = cos(omega.x() * 0.5f);
	_FLOAT fSinHPitch = sin(omega.x() * 0.5f);
	//Yaw(y)
	_FLOAT fCosHYaw = cos(omega.y() * 0.5f);
	_FLOAT fSinHYaw = sin(omega.y() * 0.5f);

	w() = fCosHRoll * fCosHPitch * fCosHYaw + fSinHRoll * fSinHPitch * fSinHYaw;
	x() = fCosHRoll * fSinHPitch * fCosHYaw + fSinHRoll * fCosHPitch * fSinHYaw;
	y() = fCosHRoll * fCosHPitch * fSinHYaw - fSinHRoll * fSinHPitch * fCosHYaw;
	z() = fSinHRoll * fCosHPitch * fCosHYaw - fCosHRoll * fSinHPitch * fSinHYaw;
}

///////////////////////////////////////////////////////////////////////////////
//
// Rotation
//
///////////////////////////////////////////////////////////////////////////////

void C4DQuaternion::axisRotation(const C4DVector3& vector,_FLOAT angle)
{
	//Quaternion out.
	D3DXQUATERNION qOut;
	//Vector.
	D3DXVECTOR3 vIn(vector);
	//Calculate it.
	D3DXQuaternionRotationAxis(&qOut,&vIn,angle);
	//Copy result.
	memcpy(values,(_FLOAT *)qOut,sizeof(_FLOAT4));
}

///////////////////////////////////////////////////////////////////////////////
//
// Rotate
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 C4DQuaternion::rotate(const C4DVector3& vector3) const
{
	//Matrix.
	D3DXMATRIX matrix;
	//Set rotation matrix.
	D3DXMatrixRotationQuaternion(&matrix,&D3DXQUATERNION(values));
	//Vector out.
	D3DXVECTOR4 vOut;
	//Transform.
	D3DXVec3Transform(&vOut,&D3DXVECTOR3(vector3),&matrix);
	//Return result.
	return C4DVector3(vOut.x / vOut.w,vOut.y / vOut.w,vOut.z / vOut.w);
}

///////////////////////////////////////////////////////////////////////////////
//
// Dot
//
///////////////////////////////////////////////////////////////////////////////

float C4DQuaternion::dot(const C4DQuaternion& quaternion) const
{
	//Quaternion 1.
	D3DXQUATERNION q1(values);
	//Quaternion 2.
	D3DXQUATERNION q2(quaternion.values);
	//Return result.
	return D3DXQuaternionDot(&q1,&q2);
}

///////////////////////////////////////////////////////////////////////////////
//
// Dot
//
///////////////////////////////////////////////////////////////////////////////

float C4DQuaternion::dot(const C4DQuaternion& q1,const C4DQuaternion& q2)
{
	//Quaternion 1.
	D3DXQUATERNION qq1(q1.values);
	//Quaternion 2.
	D3DXQUATERNION qq2(q2.values);
	//Return result.
	return D3DXQuaternionDot(&qq1,&qq2);
}

///////////////////////////////////////////////////////////////////////////////
//
// Cross
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::cross(const C4DQuaternion& quaternion) const
{
	//Quaternion 1.
	D3DXQUATERNION q1(values);
	//Quaternion 2.
	D3DXQUATERNION q2(quaternion.values);
	//Quaternion out.
	D3DXQUATERNION qOut;
	//Do cross.
	D3DXQuaternionMultiply(&qOut,&q1,&q2);
	//Returnr result.
	return C4DQuaternion((_FLOAT *)qOut);
}

///////////////////////////////////////////////////////////////////////////////
//
// Cross
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::cross(const C4DQuaternion& q1,const C4DQuaternion& q2)
{
	//Quaternion 1.
	D3DXQUATERNION qq1(q1.values);
	//Quaternion 2.
	D3DXQUATERNION qq2(q2.values);
	//Quaternion out.
	D3DXQUATERNION qOut;
	//Do cross.
	D3DXQuaternionMultiply(&qOut,&qq1,&qq2);
	//Return result.
	return C4DQuaternion((_FLOAT *)qOut);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT& C4DQuaternion::operator [] (_INTEGER index)
{
#ifdef _DEBUG
	assert(index >= 0 && index < 4);
#endif
	//Return value.
	return values[index];
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT C4DQuaternion::operator [] (_INTEGER index) const
{
#ifdef _DEBUG
	assert(index >= 0 && index < 4);
#endif
	//Return value.
	return values[index];
}

///////////////////////////////////////////////////////////////////////////////
//
// Casting
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion::operator _FLOAT* ()
{
	//Return result.
	return (FLOAT *)values;
}

///////////////////////////////////////////////////////////////////////////////
//
// Casting
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion::operator const _FLOAT* () const
{
	//Return result.
	return (const FLOAT *)values;
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion& C4DQuaternion::operator += (const C4DQuaternion& quaternion)
{
	//Set value.
	values[0] += quaternion.values[0], values[1] += quaternion.values[1], values[2] += quaternion.values[2], values[3] += quaternion.values[3];
	//Return this.
	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion& C4DQuaternion::operator -= (const C4DQuaternion& quaternion)
{
	//Set value.
	values[0] -= quaternion.values[0], values[1] -= quaternion.values[1], values[2] -= quaternion.values[2], values[3] -= quaternion.values[3];
	//Return this.
	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion& C4DQuaternion::operator *= (_FLOAT value)
{
	//Set value.
	values[0] *= value, values[1] *= value, values[2] *= value, values[3] *= value;
	//Return this.
	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion& C4DQuaternion::operator /= (_FLOAT value)
{
	//Set value.
	values[0] /= value, values[1] /= value, values[2] /= value, values[3] /= value;
	//Return this.
	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::operator + () const
{
	_FLOAT x = values[0];
	_FLOAT y = values[1];
	_FLOAT z = values[2];
	_FLOAT w = values[3];
	//Return result.
	return C4DQuaternion(x,y,z,w);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::operator - () const
{
	_FLOAT x = -values[0];
	_FLOAT y = -values[1];
	_FLOAT z = -values[2];
	_FLOAT w = -values[3];
	//Return result.
	return C4DQuaternion(x,y,z,w);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::operator + (const C4DQuaternion& quaternion) const
{
	_FLOAT x = values[0] + quaternion.values[0];
	_FLOAT y = values[1] + quaternion.values[1];
	_FLOAT z = values[2] + quaternion.values[2];
	_FLOAT w = values[3] + quaternion.values[3];
	//Return result.
	return C4DQuaternion(x,y,z,w);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::operator - (const C4DQuaternion& quaternion) const
{
	_FLOAT x = values[0] - quaternion.values[0];
	_FLOAT y = values[1] - quaternion.values[1];
	_FLOAT z = values[2] - quaternion.values[2];
	_FLOAT w = values[3] - quaternion.values[3];
	//Return result.
	return C4DQuaternion(x,y,z,w);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::operator * (_FLOAT value) const
{
	_FLOAT x = values[0] * value;
	_FLOAT y = values[1] * value;
	_FLOAT z = values[2] * value;
	_FLOAT w = values[3] * value;
	//Return result.
	return C4DQuaternion(x,y,z,w);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion C4DQuaternion::operator / (_FLOAT value) const
{
	_FLOAT x = values[0] / value;
	_FLOAT y = values[1] / value;
	_FLOAT z = values[2] / value;
	_FLOAT w = values[3] / value;
	//Return result.
	return C4DQuaternion(x,y,z,w);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

_BOOL C4DQuaternion::operator == (const C4DQuaternion& quaternion) const
{
	//Return result.
	return D3DXQUATERNION(values) == D3DXQUATERNION(quaternion.values);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

_BOOL C4DQuaternion::operator != (const C4DQuaternion& quaternion) const
{
	//Return result.
	return D3DXQUATERNION(values) != D3DXQUATERNION(quaternion.values);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DQuaternion operator * (_FLOAT value,const C4DQuaternion& quaternion)
{
	_FLOAT x = value * quaternion.values[0];
	_FLOAT y = value * quaternion.values[1];
	_FLOAT z = value * quaternion.values[2];
	_FLOAT w = value * quaternion.values[3];
	//Return result.
	return C4DQuaternion(x,y,z,w);
}
