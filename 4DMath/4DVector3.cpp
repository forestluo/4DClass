///////////////////////////////////////////////////////////////////////////////
//
// 4DVector3.cpp
//  
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////
#include "4DVector3.h"

///////////////////////////////////////////////////////////////////////////////
//
// Including
//
///////////////////////////////////////////////////////////////////////////////

#include "D3DX10Math.h"

///////////////////////////////////////////////////////////////////////////////
//
// C4DVector3
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3::C4DVector3(void)
{
	//Zero memory.
	ZeroMemory(values,sizeof(_FLOAT3));
}

///////////////////////////////////////////////////////////////////////////////
//
// C4DVector3
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3::C4DVector3(const _FLOAT* floats)
{
	//Copy memory.
	memcpy(values,floats,sizeof(_FLOAT3));
}

///////////////////////////////////////////////////////////////////////////////
//
// C4DVector3
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3::C4DVector3(const C4DVector3& vector3)
{
	//Copy memory.
	memcpy(values,vector3.values,sizeof(_FLOAT3));
}

///////////////////////////////////////////////////////////////////////////////
//
// C4DVector3
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3::C4DVector3(_FLOAT x,_FLOAT y,_FLOAT z)
{
	//Set values.
	values[0] = x, values[1] = y, values[2] = z;
}

///////////////////////////////////////////////////////////////////////////////
//
// C4DVector3
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3::~C4DVector3(void)
{

}

///////////////////////////////////////////////////////////////////////////////
//
// X
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT& C4DVector3::x()
{
	//Return result.
	return values[0];
}

///////////////////////////////////////////////////////////////////////////////
//
// X
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT C4DVector3::x() const
{
	//Return result.
	return values[0];
}

///////////////////////////////////////////////////////////////////////////////
//
// Y
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT& C4DVector3::y()
{
	//Return result.
	return values[1];
}

///////////////////////////////////////////////////////////////////////////////
//
// Y
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT C4DVector3::y() const
{
	//Return result.
	return values[1];
}

///////////////////////////////////////////////////////////////////////////////
//
// Z
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT& C4DVector3::z()
{
	//Return result.
	return values[2];
}

///////////////////////////////////////////////////////////////////////////////
//
// Z
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT C4DVector3::z() const
{
	//Return result.
	return values[2];
}

///////////////////////////////////////////////////////////////////////////////
//
// Length
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT C4DVector3::length() const
{
	//Return result.
	return D3DXVec3Length(&D3DXVECTOR3(values));
}

///////////////////////////////////////////////////////////////////////////////
//
// Normalize
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3& C4DVector3::normalize()
{
	//Vector out.
	D3DXVECTOR3 vOut;
	//Vector in.
	D3DXVECTOR3 vIn(values);
	//Normalize it.
	D3DXVec3Normalize(&vOut,&vIn);
	//Set value.
	memcpy(values,(_FLOAT *)vOut,sizeof(_FLOAT3));
	//Return this.
	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
// Normalize
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 C4DVector3::normalize() const
{
	//Vector out.
	D3DXVECTOR3 vOut;
	//Vector in.
	D3DXVECTOR3 vIn(values);
	//Normalize it.
	D3DXVec3Normalize(&vOut,&vIn);
	//Returnr result.
	return C4DVector3(vOut.x,vOut.y,vOut.z);
}

///////////////////////////////////////////////////////////////////////////////
//
// Dot
//
///////////////////////////////////////////////////////////////////////////////

float C4DVector3::dot(const C4DVector3& vector3) const
{
	//Vector 1.
	D3DXVECTOR3 v1(values);
	//Vector 2.
	D3DXVECTOR3 v2(vector3.values);
	//Return result.
	return D3DXVec3Dot(&v1,&v2);
}

///////////////////////////////////////////////////////////////////////////////
//
// Dot
//
///////////////////////////////////////////////////////////////////////////////

float C4DVector3::dot(const C4DVector3& v1,const C4DVector3& v2)
{
	//Vector 1.
	D3DXVECTOR3 vv1(v1.values);
	//Vector 2.
	D3DXVECTOR3 vv2(v2.values);
	//Return result.
	return D3DXVec3Dot(&vv1,&vv2);
}

///////////////////////////////////////////////////////////////////////////////
//
// Cross
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 C4DVector3::cross(const C4DVector3& vector3) const
{
	//Vector 1.
	D3DXVECTOR3 v1(values);
	//Vector 2.
	D3DXVECTOR3 v2(vector3.values);
	//Vector out.
	D3DXVECTOR3 vOut;
	//Do cross.
	D3DXVec3Cross(&vOut,&v1,&v2);
	//Returnr result.
	return C4DVector3(vOut.x,vOut.y,vOut.z);
}

///////////////////////////////////////////////////////////////////////////////
//
// Cross
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 C4DVector3::cross(const C4DVector3& v1,const C4DVector3& v2)
{
	//Vector 1.
	D3DXVECTOR3 vv1(v1.values);
	//Vector 2.
	D3DXVECTOR3 vv2(v2.values);
	//Vector out.
	D3DXVECTOR3 vOut;
	//Do cross.
	D3DXVec3Cross(&vOut,&vv1,&vv2);
	//Returnr result.
	return C4DVector3(vOut.x,vOut.y,vOut.z);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT& C4DVector3::operator [] (_INTEGER index)
{
#ifdef _DEBUG
	assert(index >= 0 && index < 3);
#endif
	//Return value.
	return values[index];
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT C4DVector3::operator [] (_INTEGER index) const
{
#ifdef _DEBUG
	assert(index >= 0 && index < 3);
#endif
	//Return value.
	return values[index];
}

///////////////////////////////////////////////////////////////////////////////
//
// Casting
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3::operator _FLOAT* ()
{
	//Return result.
	return (FLOAT *)values;
}

///////////////////////////////////////////////////////////////////////////////
//
// Casting
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3::operator const _FLOAT* () const
{
	//Return result.
	return (const FLOAT *)values;
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3& C4DVector3::operator += (const C4DVector3& vector3)
{
	//Set value.
	values[0] += vector3.values[0], values[1] += vector3.values[1], values[2] += vector3.values[2];
	//Return this.
	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3& C4DVector3::operator -= (const C4DVector3& vector3)
{
	//Set value.
	values[0] -= vector3.values[0], values[1] -= vector3.values[1], values[2] -= vector3.values[2];
	//Return this.
	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3& C4DVector3::operator *= (_FLOAT value)
{
	//Set value.
	values[0] *= value, values[1] *= value, values[2] *= value;
	//Return this.
	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3& C4DVector3::operator /= (_FLOAT value)
{
	//Set value.
	values[0] /= value, values[1] /= value, values[2] /= value;
	//Return this.
	return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 C4DVector3::operator + () const
{
	_FLOAT x = values[0];
	_FLOAT y = values[1];
	_FLOAT z = values[2];
	//Return result.
	return C4DVector3(x,y,z);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 C4DVector3::operator - () const
{
	_FLOAT x = -values[0];
	_FLOAT y = -values[1];
	_FLOAT z = -values[2];
	//Return result.
	return C4DVector3(x,y,z);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 C4DVector3::operator + (const C4DVector3& vector3) const
{
	_FLOAT x = values[0] + vector3.values[0];
	_FLOAT y = values[1] + vector3.values[1];
	_FLOAT z = values[2] + vector3.values[2];
	//Return result.
	return C4DVector3(x,y,z);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 C4DVector3::operator - (const C4DVector3& vector3) const
{
	_FLOAT x = values[0] - vector3.values[0];
	_FLOAT y = values[1] - vector3.values[1];
	_FLOAT z = values[2] - vector3.values[2];
	//Return result.
	return C4DVector3(x,y,z);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 C4DVector3::operator * (_FLOAT value) const
{
	_FLOAT x = values[0] * value;
	_FLOAT y = values[1] * value;
	_FLOAT z = values[2] * value;
	//Return result.
	return C4DVector3(x,y,z);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 C4DVector3::operator / (_FLOAT value) const
{
	_FLOAT x = values[0] / value;
	_FLOAT y = values[1] / value;
	_FLOAT z = values[2] / value;
	//Return result.
	return C4DVector3(x,y,z);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

_BOOL C4DVector3::operator == (const C4DVector3& vector3) const
{
	//Return result.
	return D3DXVECTOR3(values) == D3DXVECTOR3(vector3.values);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

_BOOL C4DVector3::operator != (const C4DVector3& vector3) const
{
	//Return result.
	return D3DXVECTOR3(values) != D3DXVECTOR3(vector3.values);
}

///////////////////////////////////////////////////////////////////////////////
//
// Operator
//
///////////////////////////////////////////////////////////////////////////////

C4DVector3 operator * (_FLOAT value,const C4DVector3& vector3)
{
	_FLOAT x = value * vector3.values[0];
	_FLOAT y = value * vector3.values[1];
	_FLOAT z = value * vector3.values[2];
	//Return result.
	return C4DVector3(x,y,z);
}
