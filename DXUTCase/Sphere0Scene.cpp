///////////////////////////////////////////////////////////////////////////////
//
// Sphere0Scene.cpp
//  
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "Sphere0Scene.h"

///////////////////////////////////////////////////////////////////////////////
//
// Including
//
///////////////////////////////////////////////////////////////////////////////

#include "ResourceName.h"

///////////////////////////////////////////////////////////////////////////////
//
// CSphere0Scene
//
// Default construction.
//
/////////////////////////////////////////////////////////////////////////////////

CSphere0Scene::CSphere0Scene(void)
{

}

///////////////////////////////////////////////////////////////////////////////
//
// CSphere0Scene
//
// Default deconstruction.
//
/////////////////////////////////////////////////////////////////////////////////

CSphere0Scene::~CSphere0Scene(void)
{

}

///////////////////////////////////////////////////////////////////////////////
//
// InitializeObjects
//
/////////////////////////////////////////////////////////////////////////////////

HRESULT CSphere0Scene::initializeObjects(CResourceManager* resourceManager)
{
	//Scaling.
	C4DVector3 scaling;
	//Rotation.
	C4DVector3 rotation;
	//Position.
	C4DVector3 position;
	//Renderable
	CPrimitiveObject* object;

#ifdef _DEBUG
	assert(resourceManager != _NULL);
#endif

	//Check result.
	object = createModel(resourceManager,PRIMITIVE_SPHERE0);
#ifdef _DEBUG
	assert(object != _NULL);
#endif
	//Set scale.
	//object->setScale(scaling.x(),scaling.y(),scaling.z());
	//Set position.
	//object->setPosition(position.x(),position.y(),position.z());
	//Set rotation.
	//object->setEularRotation(rotation.x(),rotation.y(),rotation.z());
	//Return ok.
	return S_OK;
}
