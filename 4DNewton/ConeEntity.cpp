///////////////////////////////////////////////////////////////////////////////
//
// ConeEntity.cpp
// 
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "ConeEntity.h"

///////////////////////////////////////////////////////////////////////////////
//
// CConeEntity
//
// Default construction.
//
/////////////////////////////////////////////////////////////////////////////////

CConeEntity::CConeEntity(void)
{

}

///////////////////////////////////////////////////////////////////////////////
//
// CConeEntity
//
// Default construction.
//
/////////////////////////////////////////////////////////////////////////////////

CConeEntity::CConeEntity(_FLOAT mass)
	: CPhysicsEntity(mass)
{

}

///////////////////////////////////////////////////////////////////////////////
//
// CConeEntity
//
// Default deconstruction.
//
/////////////////////////////////////////////////////////////////////////////////

CConeEntity::~CConeEntity(void)
{

}

/////////////////////////////////////////////////////////////////////////////////
//
// CreateShape
//
/////////////////////////////////////////////////////////////////////////////////
	
_OBJECT CConeEntity::createShape(CPhysicsManager *manager,CListNodeContainer& shapes)
{
#ifdef _DEBUG
	assert(manager != _NULL);
#endif

	dVector minBox;
	dVector maxBox;
	//Get the Bounding Box for this entity.
	getBoundingBox(minBox,maxBox);

	//Calculate the box size and dimensions of the physics collision shape. 
	dVector size(maxBox - minBox);
	dVector origin((maxBox + minBox).Scale(0.5f));
	size.m_w = 1.0f;
	origin.m_w = 1.0f;

	//Make and offset matrix for this collision shape.
	dMatrix offset(GetIdentityMatrix());
	offset.m_posit = origin;

	//Now create a collision cone for this entity.
	return manager->createConeShape((size.m_x + size.m_z) / 4.0f,size.m_y);
}
