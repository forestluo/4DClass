///////////////////////////////////////////////////////////////////////////////
//
// PhysicsJoint.cpp
// 
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "PhysicsJoint.h"

///////////////////////////////////////////////////////////////////////////////
//
// Including
//
///////////////////////////////////////////////////////////////////////////////

#include "NewtonPhysics.h"

///////////////////////////////////////////////////////////////////////////////
//
// Definition
//
///////////////////////////////////////////////////////////////////////////////

#define COLLISION_BODY(p)									((const NewtonBody *)(p))
#define NEWTON_JOINT(p)										((const NewtonJoint *)(p))

///////////////////////////////////////////////////////////////////////////////
//
// CPhysicsJoint
//
// Default construction.
//
/////////////////////////////////////////////////////////////////////////////////

CPhysicsJoint::CPhysicsJoint(void)
{
	//Set default value.
	joint = _NULL;
	object = (CPhysicsJointObject *)_NULL;
}

///////////////////////////////////////////////////////////////////////////////
//
// CPhysicsJoint
//
// Default deconstruction.
//
/////////////////////////////////////////////////////////////////////////////////

CPhysicsJoint::~CPhysicsJoint(void)
{
	//Clear value.
	joint = _NULL;
	object = (CPhysicsJointObject *)_NULL;
}

/////////////////////////////////////////////////////////////////////////////////
//
// Destroy
//
/////////////////////////////////////////////////////////////////////////////////

void CPhysicsJoint::destroy()
{
	//Do nothing.
}

/////////////////////////////////////////////////////////////////////////////////
//
// SetCallbacks
//
/////////////////////////////////////////////////////////////////////////////////

void CPhysicsJoint::setCallbacks(_OBJECT joint)
{
#ifdef _DEBUG
	assert(joint != _NULL);
#endif
}

/////////////////////////////////////////////////////////////////////////////////
//
// SetLimits
//
/////////////////////////////////////////////////////////////////////////////////

void CPhysicsJoint::setLimits(_OBJECT joint)
{
#ifdef _DEBUG
	assert(joint != _NULL);
#endif
}

/////////////////////////////////////////////////////////////////////////////////
//
// ParagramEnd
//
/////////////////////////////////////////////////////////////////////////////////

void CPhysicsJoint::paragramEnd(_LONG timestamp)
{
#ifdef _DEBUG
	assert(joint != _NULL);
	assert(object != _NULL);
#endif
	//Call function.
	object->paragramEnd(timestamp);
}

/////////////////////////////////////////////////////////////////////////////////
//
// PhysicsEnd
//
/////////////////////////////////////////////////////////////////////////////////

void CPhysicsJoint::physicsEnd()
{
#ifdef _DEBUG
	assert(joint != _NULL);
	assert(object != _NULL);
#endif
	//Call function.
	object->physicsEnd();
}

/////////////////////////////////////////////////////////////////////////////////
//
// PhysicsBegin
//
/////////////////////////////////////////////////////////////////////////////////

void CPhysicsJoint::physicsBegin(_LONG timestamp)
{
#ifdef _DEBUG
	assert(joint != _NULL);
	assert(object != _NULL);
#endif
	//Call function.
	object->physicsBegin(timestamp);
}

/////////////////////////////////////////////////////////////////////////////////
//
// GetPhysicsChild
//
/////////////////////////////////////////////////////////////////////////////////
	
CPhysicsObject* CPhysicsJoint::getPhysicsChild() const
{
#ifdef _DEBUG
	assert(object != _NULL);
#endif

	//Get child.
	CWorldObject* child = object->getJointChild();
#ifdef _DEBUG
	assert(child != _NULL && child->isPhysicsObject());
	assert(child->getObjectType() != CWorldObject::jointObject);
#endif
	//Get physics object.
	CPhysicsObject* physicsChild = (CPhysicsObject *)child->getPhysics();
#ifdef _DEBUG
	assert(physicsChild != _NULL);
	assert(physicsChild->getMass() > 0.0f);
#endif
	//Return result.
	return physicsChild;
}

/////////////////////////////////////////////////////////////////////////////////
//
// GetPhysicsParent
//
/////////////////////////////////////////////////////////////////////////////////
	
CPhysicsObject* CPhysicsJoint::getPhysicsParent() const
{
#ifdef _DEBUG
	assert(object != _NULL);
#endif

	//Get parent.
	CWorldObject* parent = object->getJointParent();
	//Physics object.
	CPhysicsObject* physicsParent = (CPhysicsObject *)_NULL;
	//Check result.
	if(parent != _NULL)
	{
#ifdef _DEBUG
		assert(parent->isPhysicsObject());
		assert(parent->getObjectType() != CWorldObject::jointObject);
#endif
		//Get physics object.
		physicsParent = (CPhysicsObject *)parent->getPhysics();
#ifdef _DEBUG
		assert(physicsParent->getMass() >= 0.0f);
#endif
	}
	//Return result.
	return physicsParent;
}

/////////////////////////////////////////////////////////////////////////////////
//
// DetachObject
//
/////////////////////////////////////////////////////////////////////////////////
	
void CPhysicsJoint::detachObject(CPhysicsManager* manager)
{
#ifdef _DEBUG
	assert(manager != _NULL);
#endif
}

/////////////////////////////////////////////////////////////////////////////////
//
// AttachObject
//
/////////////////////////////////////////////////////////////////////////////////
	
_BOOL CPhysicsJoint::attachObject(CPhysicsManager* manager,CPhysicsJointObject* object)
{
#ifdef _DEBUG
	assert(object != _NULL);
	assert(manager != _NULL);
	assert(this->object == _NULL);
#endif
	//Return false.
	return _FALSE;
}
