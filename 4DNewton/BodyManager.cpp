///////////////////////////////////////////////////////////////////////////////
//
// BodyManager.cpp
// 
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "BodyManager.h"
#include "NewtonPhysics.h"

///////////////////////////////////////////////////////////////////////////////
//
// Definition
//
///////////////////////////////////////////////////////////////////////////////

#define WORLD_INSTANCE(p)									((const NewtonWorld *)(p))
#define COLLISION_BODY(p)									((const NewtonBody *)(p))
#define COLLISION_SHAPE(p)									((const NewtonCollision *)(p))

///////////////////////////////////////////////////////////////////////////////
//
// CBodyManager
//
// Default construction.
//
/////////////////////////////////////////////////////////////////////////////////

CBodyManager::CBodyManager(void)
{

}

///////////////////////////////////////////////////////////////////////////////
//
// CBodyManager
//
// Default deconstruction.
//
/////////////////////////////////////////////////////////////////////////////////

CBodyManager::~CBodyManager(void)
{

}

///////////////////////////////////////////////////////////////////////////////
//
// DestroyBody
//
///////////////////////////////////////////////////////////////////////////////

void CBodyManager::destroyBody(_OBJECT collisionBody)
{
#ifdef _DEBUG
	assert(world != _NULL);
	assert(collisionBody != _NULL);
#endif
	//Destroy body.
	::NewtonDestroyBody(WORLD_INSTANCE(world),COLLISION_BODY(collisionBody));
}

///////////////////////////////////////////////////////////////////////////////
//
// CreateBody
//
///////////////////////////////////////////////////////////////////////////////
	
_OBJECT CBodyManager::createBody(_OBJECT collisionShape,_FLOAT mass)
{
	//Set value.
	dFloat fMass = mass;
#ifdef _DEBUG
	assert(world != _NULL);
	assert(collisionShape != _NULL);
#endif
	//Return result.
	return ::NewtonCreateBody(WORLD_INSTANCE(world),COLLISION_SHAPE(collisionShape),&fMass);
}
