///////////////////////////////////////////////////////////////////////////////
//
// SliceAttribute.cpp
//  
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "SliceAttribute.h"

///////////////////////////////////////////////////////////////////////////////
//
// Including
//
///////////////////////////////////////////////////////////////////////////////

#include <memory.h>

///////////////////////////////////////////////////////////////////////////////
//
// Definition
//
///////////////////////////////////////////////////////////////////////////////

#define DEFAULT_THICK										0.01f

///////////////////////////////////////////////////////////////////////////////
//
// Global
//
///////////////////////////////////////////////////////////////////////////////

//Floor0.
const CSliceAttribute CSliceAttribute::floor0;

///////////////////////////////////////////////////////////////////////////////
//
// CSliceAttribute
//
// Default construction.
//
/////////////////////////////////////////////////////////////////////////////////

CSliceAttribute::CSliceAttribute(void)
{
	//Set type and initialize default.
	type = CPrimitiveAttribute::floor0Primitive; initializeDefault();
}

///////////////////////////////////////////////////////////////////////////////
//
// CSliceAttribute
//
// Default deconstruction.
//
/////////////////////////////////////////////////////////////////////////////////

CSliceAttribute::~CSliceAttribute(void)
{

}

///////////////////////////////////////////////////////////////////////////////
//
// GetPrimitiveAttribute
//
/////////////////////////////////////////////////////////////////////////////////

CPrimitiveAttribute CSliceAttribute::getPrimitiveAttribute() const
{
	//Attribute.
	CPrimitiveAttribute attribute;
#ifdef _DEBUG
	assert(type == CPrimitiveAttribute::floor0Primitive);
#endif
	//Set type.
	attribute.setType(type);
	//Copy data.
	attribute.rings = rings;
	attribute.segments = segments;
	//Copy data.
	attribute.primitiveData.cuboid.depth = depth;
	attribute.primitiveData.cuboid.width = width;
	attribute.primitiveData.cuboid.height = DEFAULT_THICK;
	//Return attribute.
	return attribute;
}

/////////////////////////////////////////////////////////////////////////////////
//
// InitializeDefault
//
/////////////////////////////////////////////////////////////////////////////////

void CSliceAttribute::initializeDefault()
{
#ifdef _DEBUG
	assert(type == CPrimitiveAttribute::floor0Primitive);
#endif
	//Set default value.
	depth = 1.0f;
	width = 1.0f;
	height = DEFAULT_THICK;
	//Setup attribute.
	setupAttribute();
}

/////////////////////////////////////////////////////////////////////////////////
//
// Initialize
//
/////////////////////////////////////////////////////////////////////////////////

void CSliceAttribute::initialize(_FLOAT width,_FLOAT depth)
{
#ifdef _DEBUG
	assert(width > 0.0f && depth > 0.0f);
#endif

#ifdef _DEBUG
	assert(type == CPrimitiveAttribute::floor0Primitive);
#endif
	//Copy data.
	this->depth = depth;
	this->width = width;
	this->height = DEFAULT_THICK;
	//Setup attribute.
	setupAttribute();
}

///////////////////////////////////////////////////////////////////////////////
//
// SetPrimitiveAttribute
//
///////////////////////////////////////////////////////////////////////////////

void CSliceAttribute::setPrimitiveAttribute(const CPrimitiveAttribute& attribute)
{
#ifdef _DEBUG
	assert(type == attribute.getType());
#endif
	//Initialize it.
	initialize(attribute.primitiveData.cuboid.depth,attribute.primitiveData.cuboid.width);
}
