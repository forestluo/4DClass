///////////////////////////////////////////////////////////////////////////////
//
// NormalAttribute.cpp
// 
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "NormalAttribute.h"

///////////////////////////////////////////////////////////////////////////////
//
// Including
//
///////////////////////////////////////////////////////////////////////////////

#include <stdlib.h>
#include <memory.h>

///////////////////////////////////////////////////////////////////////////////
//
// Global
//
///////////////////////////////////////////////////////////////////////////////

const _INTEGER CNormalAttribute::nullNormal					= 0;
const _INTEGER CNormalAttribute::float3Normal				= 1;

///////////////////////////////////////////////////////////////////////////////
//
// CPhysicsAttribute
//
// Default construction.
//
/////////////////////////////////////////////////////////////////////////////////

CNormalAttribute::CNormalAttribute(void)
{
	//Set default value.
	type = nullNormal;

	//Set count.
	count = 0;
	//Clear data.
	memset(&normalData,0,sizeof(tagNormalData));
}

///////////////////////////////////////////////////////////////////////////////
//
// CPhysicsAttribute
//
// Default deconstruction.
//
/////////////////////////////////////////////////////////////////////////////////

CNormalAttribute::~CNormalAttribute(void)
{
	//Clear all.
	clearAllNormal();
}

///////////////////////////////////////////////////////////////////////////////
//
// CopyNormal
//
/////////////////////////////////////////////////////////////////////////////////

void CNormalAttribute::copyNormal(const CNormalAttribute& attribute)
{
	//Set referenced.
	setReferenced(_TRUE);
	//Set default value.
	type = attribute.type;

	//Set count.
	count = attribute.count;
	//Copy data.
	memcpy(&normalData,&attribute.normalData,sizeof(tagNormalData));
}

///////////////////////////////////////////////////////////////////////////////
//
// GetNormalType
//
///////////////////////////////////////////////////////////////////////////////

_INTEGER CNormalAttribute::getNormalType() const
{
	//Return result.
	return type;
}

///////////////////////////////////////////////////////////////////////////////
//
// SetNormalType
//
///////////////////////////////////////////////////////////////////////////////

void CNormalAttribute::setNormalType(_INTEGER type)
{
#ifdef _DEBUG
	assert(type >= 0 && type <= 1);
#endif
	//Set value.
	this->type = type;
}

///////////////////////////////////////////////////////////////////////////////
//
// GetNormalSize
//
///////////////////////////////////////////////////////////////////////////////

_INTEGER CNormalAttribute::getNormalSize() const
{
	//Check type.
	switch(type)
	{
	case nullNormal:
		break;
	case float3Normal:
		return sizeof(_FLOAT3);
	default:
#ifdef _DEBUG
		assert(_FALSE);
#endif
	}
	return 0;
}

///////////////////////////////////////////////////////////////////////////////
//
// ClearAllNormal
//
///////////////////////////////////////////////////////////////////////////////

void CNormalAttribute::clearAllNormal()
{
	//Clear count.
	count = 0;
	//Check type.
	switch(type)
	{
	case nullNormal:
		break;
	case float3Normal:
		//Check result.
		if(normalData.normalFloat3.normals != _NULL)
		{
			//Check referenced.
			if(!isReferenced())
			{
				//Delete normals.
				free(normalData.normalFloat3.normals);
			}
			//Clear normals.
			normalData.normalFloat3.normals = (_FLOAT3 *)_NULL;
		}
		break;
	default:
#ifdef _DEBUG
		assert(_FALSE);
#endif
	}
}

///////////////////////////////////////////////////////////////////////////////
//
// GetNormalCount
//
///////////////////////////////////////////////////////////////////////////////

_INTEGER CNormalAttribute::getNormalCount() const
{
	//Return result.
	return count;
}

///////////////////////////////////////////////////////////////////////////////
//
// GetFloat3Normal
//
///////////////////////////////////////////////////////////////////////////////
	
_FLOAT3* CNormalAttribute::getFloat3Normal() const
{
	//Return values.
	return normalData.normalFloat3.normals;
}

///////////////////////////////////////////////////////////////////////////////
//
// CreateFloat3Normal
//
///////////////////////////////////////////////////////////////////////////////

_FLOAT3* CNormalAttribute::createFloat3Normal(_INTEGER count)
{
	//Normals.
	_FLOAT3* normals;

#ifdef _DEBUG
	assert(count > 0);
	assert(this->normalData.normalFloat3.normals == _NULL);
#endif
	//Set count.
	this->count = count;
	//Set type.
	this->type = float3Normal;

	//Create normals.
	normals = (_FLOAT3 *)malloc(count * sizeof(_FLOAT3));
	//Check result.
#ifdef _DEBUG
	assert(normals != _NULL);
#endif
	//Clear normals.
	memset(normals,0,count * sizeof(_FLOAT3));

	//Set referenced.
	setReferenced(_FALSE);
	//Set normals.
	this->normalData.normalFloat3.normals = normals;
	//Return normals.
	return normals;
}

///////////////////////////////////////////////////////////////////////////////
//
// SetFloat3Normal
//
///////////////////////////////////////////////////////////////////////////////

void CNormalAttribute::setFloat3Normal(_INTEGER count,_FLOAT3* normals)
{
#ifdef _DEBUG
	assert(count > 0);
	assert(normals != _NULL);
	assert(this->normalData.normalFloat3.normals == _NULL);
#endif
	//Set count.
	this->count = count;
	//Set type.
	this->type = float3Normal;
	//Set reference.
	setReferenced(_TRUE);
	//Set normals.
	this->normalData.normalFloat3.normals = normals;
}