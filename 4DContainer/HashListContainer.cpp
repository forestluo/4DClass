///////////////////////////////////////////////////////////////////////////////
//
// HashListContainer.cpp
//  
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "HashListContainer.h"

///////////////////////////////////////////////////////////////////////////////
//
// Including
//
///////////////////////////////////////////////////////////////////////////////

#include "KeyListNode.h"
#include "KeyListNodeContainer.h"

///////////////////////////////////////////////////////////////////////////////
//
// Definition
//
///////////////////////////////////////////////////////////////////////////////

#define LIST_INSTANCE(p)									((CKeyListNodeContainer *)(p))

///////////////////////////////////////////////////////////////////////////////
//
// CHashListContainer
//
///////////////////////////////////////////////////////////////////////////////

CHashListContainer::CHashListContainer(void)
{
	//Create list.
	list = new CKeyListNodeContainer();
#ifdef _DEBUG
	assert(list != _NULL);
#endif
}

///////////////////////////////////////////////////////////////////////////////
//
// CHashListContainer
//
///////////////////////////////////////////////////////////////////////////////

CHashListContainer::~CHashListContainer(void)
{
	//Check result.
	if(list != _NULL)
	{
		//Delete list.
		delete (CKeyListNodeContainer *)list;
		//Clear list.
		list = (CKeyListNodeContainer *)_NULL;
	}
}

///////////////////////////////////////////////////////////////////////////////
//
// GetValue
//
///////////////////////////////////////////////////////////////////////////////

_OBJECT CHashListContainer::getValue(_LONG key)
{
#ifdef _DEBUG
	assert(key != -1L);
#endif
	//Get value.
	_OBJECT result = CHashTreeContainer::getValue(key);
	//Check result.
	return result != _NULL ? ((CKeyListNode *)result)->getValue() : _NULL;
}

///////////////////////////////////////////////////////////////////////////////
//
// SetValue
//
///////////////////////////////////////////////////////////////////////////////

_OBJECT CHashListContainer::setValue(_LONG key,_OBJECT value)
{
#ifdef _DEBUG
	assert(key != -1L && list != _NULL);
#endif
	//Set value.
	_OBJECT result = CHashTreeContainer::setValue(key,LIST_INSTANCE(list)->addTail(key,value));
	//Check result.
	if(result == _NULL) return _NULL;
	//Get value.
	_OBJECT object = ((CKeyListNode *)result)->getValue();
	//Remove it from list.
	LIST_INSTANCE(list)->deleteNode((CKeyListNode *)result);
	//Return result.
	return object;
}

///////////////////////////////////////////////////////////////////////////////
//
// RemoveValue
//
///////////////////////////////////////////////////////////////////////////////
	
_OBJECT CHashListContainer::removeValue(_LONG key)
{
#ifdef _DEBUG
	assert(list != _NULL);
#endif
	//Remove value.
	_OBJECT result = CHashTreeContainer::removeValue(key);
	//Check result.
	if(result == _NULL) return _NULL;
	//Get value.
	_OBJECT object = ((CKeyListNode *)result)->getValue();
	//Remove it from list.
	LIST_INSTANCE(list)->deleteNode((CKeyListNode *)result);
	//Return value.
	return object;
}

///////////////////////////////////////////////////////////////////////////////
//
// GetIndexed
//
///////////////////////////////////////////////////////////////////////////////

_OBJECT CHashListContainer::getIndexed(_INTEGER index)
{
#ifdef _DEBUG
	assert(list != _NULL);
	assert(index >= 0 && index < getCount());
#endif
	//Return result.
	return LIST_INSTANCE(list)->getIndexed(index);
}

///////////////////////////////////////////////////////////////////////////////
//
// ClearAll
//
///////////////////////////////////////////////////////////////////////////////

void CHashListContainer::clearAll()
{
	//Clear all.
	CHashTreeContainer::clearAll();
	//Check result.
	if(list != _NULL) LIST_INSTANCE(list)->clearAll();
}

///////////////////////////////////////////////////////////////////////////////
//
// GetEnumeration
//
///////////////////////////////////////////////////////////////////////////////

void CHashListContainer::getEnumeration(CListNodeEnumeration* enumeration)
{
#ifdef _DEBUG
	assert(list != _NULL);
	assert(enumeration != _NULL);
#endif
	//Set enumeration.
	LIST_INSTANCE(list)->getEnumeration(enumeration);
}
