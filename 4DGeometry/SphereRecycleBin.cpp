///////////////////////////////////////////////////////////////////////////////
//
// SphereRecycleBin.cpp
//  
// 4DClass Developer
// Copyright (c) 4DClass. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

#include "SphereRecycleBin.h"
#include "SimpleSphere.h"

///////////////////////////////////////////////////////////////////////////////
//
// Definition
//
///////////////////////////////////////////////////////////////////////////////

#define MAX_SPHERE_COUNT									2048

///////////////////////////////////////////////////////////////////////////////
//
// CSphereRecycleBin
//
///////////////////////////////////////////////////////////////////////////////

CSphereRecycleBin::CSphereRecycleBin(void)
{
	//Set default capacity.
	setCapacity(MAX_SPHERE_COUNT);
}

///////////////////////////////////////////////////////////////////////////////
//
// ~CSphereRecycleBin
//
///////////////////////////////////////////////////////////////////////////////

CSphereRecycleBin::~CSphereRecycleBin(void)
{
	//Clear all.
	clearAll();
}

///////////////////////////////////////////////////////////////////////////////
//
// NewObject
//
///////////////////////////////////////////////////////////////////////////////

_OBJECT CSphereRecycleBin::newObject()
{
	//Return result.
	return new CSimpleSphere();
}

///////////////////////////////////////////////////////////////////////////////
//
// DeleteObject
//
///////////////////////////////////////////////////////////////////////////////

void CSphereRecycleBin::deleteObject(_OBJECT object)
{
#ifdef _DEBUG
	assert(object != _NULL);
#endif
	//Delete object.
	delete ((CSimpleSphere *)object);
}

///////////////////////////////////////////////////////////////////////////////
//
// Recycle
//
///////////////////////////////////////////////////////////////////////////////

void CSphereRecycleBin::recycle(_OBJECT object)
{
#ifdef _DEBUG
	assert(object != _NULL);
#endif
	//Recycle sphere.
	CRecycleBin::recycle((CSimpleSphere *)object);
}
